08/05/25 - setup
#backend
- con docker aperto, dal cmd aperto nella cartella backend, lanciare  docker build -t anonimadata-backend . per costruire l'immagine docker (si basa su Dockerfile)
- per lanciare l'immagine eseguire docker run -it -p 8080:8080 anonimadata-backend
- collegarsi a localhost:8080 per vedere messaggio di ok

#terraform
- variables.tf contiene le variabili cos√¨ sono parametrizzate
- cloudrun.tf contiene il codice per cloudrun su GCP
- main.tf contiene le info sul provider e su terraform

per eseguire il codice, da dentro la cartella:
    terraform init
    terraform plan -var="project_id=IL_TUO_PROJECT_ID"
    terraform apply -var="project_id=IL_TUO_PROJECT_ID"

Come usare Firebase Authentication in un progetto GCP
üîπ 1. Attiva Firebase sul tuo progetto GCP
        - Vai su: https://console.firebase.google.com
        - Clicca su ‚ÄúAggiungi progetto‚Äù
        - Seleziona il tuo progetto GCP esistente
        - Attiva Firebase Authentication
üîπ 2. Abilita il provider di accesso (Google, email, ecc.)
        - Nella Firebase Console: Authentication ‚Üí Sign-in method
        - Abilita Google
        - Inserisci il tuo dominio e URI di reindirizzamento, se richiesto
        - (Facoltativo: anche email/password, GitHub, ecc.)
Per runnare il container serve il file .json prodotto da firebase dopo averlo attivato su GCP, quindi:
    1- Scarica il file .json della service account da Firebase
    2- Rinominalo in firebase-service-account.json e mettilo nella stessa cartella backend
    3- Esegui con Docker o deploya su Cloud Run

Perch√® abbiamo scelto Firebase e non Identity Platform? perch√® prevediamo solo login con google, fino a una certa soglia Firebase √® grautito mentre IP si paga sempre, non ci serve MFA o login aziendali

Riassunto del giorno: scritto codice di terraform e backend compreso di autenticazione tramite firebase. Non ho testato/eseguito NIENTE. Non ho toccato GCP (quindi non ho nemmeno attivato Firebase). Manca tutta la parte frontend (i file sono mockup vuoti)

TODO: eseguire le robe, aggiungere firebase su GCP, scrivere frontend

08/05/2025 - Setup
#Frontend
Setup
1. Installa Node.js    https://nodejs.org/
    (Facoltativo) Possibilt√† di installare choco, un gestore di pacchetti per Windows, ti permette di installare programmi direttamente da terminale 
2. Verifica installazione: node -v     e    npm -v   
3. nstalla Vite CLI: npm install -g create-vite
4. Crea progetto Vite React: npm create vite@latest frontend -- --template react
4. Progetto react
5. Creo nuova cartella "S_R" in locale.Dentro la nuova cartella: cd frontend    npm install   
6. Avvia server: npm run dev
7. Apri Chrome e vai su http://localhost:5173/ per vedere l'app React
       
Visual studio code
Apro la cartella "S_R" su VSCode e inizio a modificare il file  frontend/src/App.jsx
Dentro src/, creo una nuova cartella chiamata components con due file:
    - UploadForm.jsx ‚Üí gestisce il caricamento del file
    - AlgorithmSelector.jsx ‚Üí mostra la selezione dell‚Äôalgoritmo 
    - styles.css -> aggiunge stili al progetto

PER APRIRE IL SITO WEB
1. Entrare nella cartella frontend
2. Aprire terminale git bash
3. Lanciare il comando     npm run dev
4. Copiare sul web il link che viene generato 
5. Chiudendo il terminale si chiude anche il sito web


17/05/2025 - Frontend

Ho essenzialmente rifatto totalmente il frontend. Situazione attuale:

COMPOSIZIONE PROGETTO

frontend/
‚îú‚îÄ‚îÄ node_modules/              # Dipendenze del progetto (generate automaticamente)
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îî‚îÄ‚îÄ index.html             # HTML base dell'app React, punto di mount della SPA
‚îú‚îÄ‚îÄ src/                       # Cartella principale del codice sorgente
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ assets/                # Immagini e risorse statiche
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ banner-bg.jpg      # Immagine di sfondo usata nell'homepage e nel login
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ components/            # Componenti React riutilizzabili
‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AlgorithmSelector.jsx     # Dropdown per selezionare l‚Äôalgoritmo di anonimizzazione
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FileUpload.jsx            # Componente per caricare un file (dataset)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HomePage.jsx              # Pagina principale dopo il login, contiene upload e algoritmi
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LoginPage.jsx             # Pagina di login con input email/password
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ WhiteBox.jsx              # Box stilizzato usato come contenitore
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ styles/                # File CSS di stile per i componenti
‚îÇ   ‚îÇ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.css            # Stili globali dell'app (layout, header, titolo, etc.)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ButtonUpload.css   # Stili specifici per il bottone di upload file
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Login.css          # Stili specifici della pagina di login
‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ App.test.js            # File di test per l'app (React Testing Library o Jest)
‚îÇ   ‚îú‚îÄ‚îÄ MainApp.jsx            # Entry point della SPA, include routing tra Login e Home
‚îÇ   ‚îú‚îÄ‚îÄ reportWebVitals.js     # (Opzionale) per monitorare performance dell'app React
‚îÇ   ‚îú‚îÄ‚îÄ setupTests.js          # Configurazione per i test automatici
‚îÇ   ‚îî‚îÄ‚îÄ logo.svg               # Logo React di default (probabilmente inutilizzato)
‚îÇ
‚îú‚îÄ‚îÄ .gitignore                 # File per ignorare cartelle (es. node_modules) in Git
‚îú‚îÄ‚îÄ Dockerfile                 # File per creare un'immagine Docker dell'app
‚îú‚îÄ‚îÄ eslint.config.js           # Configurazione per linting del codice
‚îú‚îÄ‚îÄ index.html                 # File HTML base (doppione nella root: da verificare)
‚îú‚îÄ‚îÄ package-lock.json          # Mappa delle dipendenze (versioni esatte)
‚îú‚îÄ‚îÄ package.json               # Metadata del progetto e lista dipendenze


COSA FA ATTUALMENTE IL FRONTEND
Il frontend √® un'applicazione React con routing di base e componenti modulari. Attualmente include:

1. LoginPage.jsx
Form di login utente (non ancora collegato a un sistema di autenticazione reale)

2. HomePage.jsx
Pagina principale dopo il login
	- Solo esetico: Caricare un dataset
	- Solo esetico: Scegliere un algoritmo
	- Bottone Anonymize abilitato solo se file e algoritmo sono selezionati

21/05/25 - backend
- ho creato una nuova cartella di backend per cercare di uniformare il lavoro e dividere bene in moduli 
- ho modificato la parte di chiamata del backend nel frontend. Non ho eliminato ancora la parte vecchia visto che non sono sicura sia corretta la nuova parte
- ho dovuto installare npm install react-router-dom, ricordiamocelo per una futura guida di come far partire il progetto da dare al prof

22/05/25 - collegamento backend e frontend
- eliminata cartella vecchia di backend
- adesso il backend e il frontend si parlano correttamente
- nella cartella utility ho messo un file .csv per testare il funzionamento
- WORKFLOW per far funzionare tutto: 
    1- aprire dokcer desktop
    2- da una prima finestra w1 nel backend (w1/backend) lanciare docker run -it -p 8080:8080 anonimadata-backend
    3- (w2/frontend) lanciare npm run dev e aprire browser

TO DO:
- sistemare estetica bottone "upload dataset" perch√® √® brutto (anche se funziona)
- [frontend] gli algoritmi l-diversity e t-closeness che non hanno parametro non abilitano tasto anonymize
- implementare effettivamente i vari metodi di anonimizzazione
- csv funziona correttamente, c'√® da testare con file json

23/05/2025 - frontend
- Bottone upload dataset sistemato

23/05/25 - docker frontend
- implementato con successo docker per il frontend
- testato anche con file .json e funziona correttamente, inoltre non permette di selezionare altri tipi di file come da traccia
- anche il file di test .json √® presente nella cartella utility
- prima di avviare il container la prima volta bisogna costruirlo con  docker build -t anonimadata-frontend . (nella cartella del frontend)
- WORKFLOW per far funzionare tutto: 
    1- aprire docker desktop
    2- da una prima finestra w1 nel backend (w1/backend) lanciare docker run -it -p 8080:8080 anonimadata-backend
    3- (w2/frontend) lanciare docker run -p 8081:80 anonimadata-frontend e aprire browser con indirizzo localhost:8081

TO DO:
- [frontend] gli algoritmi l-diversity e t-closeness che non hanno parametro non abilitano tasto anonymize
- implementare effettivamente i vari metodi di anonimizzazione

24/05/25 - k_anon
- scritto algoritmo di k_anon, ma lo devo aggiustare visto che non fa bene il suo lavoro

25/05/2025  differential privacy
- scritto algoritmo differential privacy ma andrebbe controllato bene
- sistemato preview dati frontend

DA FARE PRIMA DI TUTTO
- Rebuildare backend -> Ho aggiunto la libreria diffprivlib

30/05/25 - l_div
- scritto algoritmo di l_div, ma va testato meglio e migliorato
- ho aggiunto anche la comparsa del parametro nel frontend che non c'era per l_div

31/05/25
1. Ho notato che non faceva gli aggiornamenti in tempo reale nel frontend salvando il file su vs code, quindi ho fatto delle modifiche:
    - ./frontend/Dockerfile 	modificato	// build produzione
    - ./backend/Dockerfile 		modificato	
    - ./frontend/vite.config.js 	modificato	
    - ./frontend/Dockerfile.dev	creato 		// per orchestrare frontend e backend
    - gruppo-5/docker-compose.yml	creato		// dev server con hot reload, permette modifica realtime
Adesso per far buildare i server non serve fare il doppio passaggio di prima, perch√© vengono buildati e runnati ogni volta in automatico. Devi:
    - Aprire una bash in gruppo-5, quindi nella root della cartella e lanciare docker-compose up --build
    Fine. Fammi sapere se non ti va bene
2. Ho modificato anche lo scroll verticale, bloccandolo ed evitando che scorra all'infinito (modifiche ad App.css)
3. Ho scritto l'algoritmo di t-closeness ma non funziona, da rivedere

06/06/25 - l_div e anonymize
- aggiunti file per le gerarchie delle generalizzazioni e identificazione dinamica degli attributi sensibili/quasi id/identificativi
- l_div funzionante. non penso ci rimetter√≤ le mani